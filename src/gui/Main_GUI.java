/**
 * UNIVERSIDAD DE SAN CARLOS DE GUATEMALA
 * FACULTAD DE INGENIERIA
 * ESCUELA DE CIENCIAS Y SISTEMAS
 * COMPILADORES 1
 * PROYECTO 1
 * Creado el 23 de agosto 2011, 08:31AM
 */
package gui;

import java.awt.event.*;
import java.io.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.*;
import analisis.*;
import java.util.*;
/*
 * Interfaz Principal de la aplicacion
 * @(#)Main_GUI.java
 * Proyecto1_200819312 application
 * @author David Y. Gonzalez
 */

public class Main_GUI extends javax.swing.JFrame {
    /**Objeto de tema de ayuda**/
    gui.acercade.AcercaDe acerca;
    /**Posicion del Cursor de ambos TextArea**/
    private int caret;
    /**Representa un pedazo de HTMl**/
    private final static String htmlEnd = "</body></html>";
    /**Opciones para los tipos de ficheros. Es utilizado en Abrir y GuardarComo**/
    private final static String[] opciones = new String[]{"Configuracion", "Escenario"};
    /**Numero de lineas de taConfig**/
    private Integer linesConfig;
    /**Numero de lineas de taScene**/
    private Integer linesScene;
    /**Indica si el Fichero de Configuracion está Guardado**/
    private boolean savedConfig;
    /**Indica si el Fichero de Escenario está Guardado**/
    private boolean savedScene;
    /**El titulo a mostrar con el fichero de configuracion**/
    private String titleConfig, fileNameConfig;
    /**El titulo a mostrar con el fichero de escenario**/
    private String titleScene, fileNameScene;
    /**Representa a la ubicacion del fichero de Configuracion Actual**/
    private File originalFileConfig;
    /**Representa a la ubicacion del fichero de Escenario Actual**/
    private File originalFileScene;
    /**true si taConfig tiene el Focus. false si taScene tiene el focus. Es utilizado en 
     * los metodos de guardar, y para componer los números de línea.
     **/
    private boolean focusFlag;
    /**
     * Tabla de simbolos, inicializados por el analisis 1,
     * posteriormente utilizado por analisis 2
     **/
    private boolean ParserSceneFlag;
    private TablaSimbolos tablasimbolos;
    private LinkedList<XError> listaErrores;
    //private Stage escenario;
    private TableroEdit_GUI tableroedit;
    private TableroGame_GUI tablerogame;

    /** Creates new form Main_GUI */
    public Main_GUI() {
        initComponents();
        focusFlag = true;//taConfig tiene el focus
        linesConfig = 1;
        linesScene = 1;
        savedConfig = true;
        savedScene = true;
        titleConfig = "JBadMeth - Nuevo Archivo Configuracion";
        titleScene = "JBadMeth - Nuevo Archivo Escena";
        
        jfc = new JFileChooser();
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("Fichero de entrada (*.xconf, *.txt)", "txt", "xconf");
        
        jfc.setFileFilter(fnef);
        jfc.setCurrentDirectory(new File("../.."));
        //jfc.setCurrentDirectory(new File("../"));
        
        tableroedit = new TableroEdit_GUI();
        tablerogame = new TableroGame_GUI();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane = new javax.swing.JSplitPane();
        jpWest = new javax.swing.JPanel();
        jpSouthWest = new javax.swing.JPanel();
        jllFileDirTitleWest = new javax.swing.JLabel();
        jlFileDirConfig = new javax.swing.JLabel();
        jspWest = new javax.swing.JScrollPane();
        jpConfig = new javax.swing.JPanel();
        jlLineaConfig = new javax.swing.JLabel();
        taConfig = new javax.swing.JTextArea();
        jlTitleWest = new javax.swing.JLabel();
        jpEast = new javax.swing.JPanel();
        jspEast = new javax.swing.JScrollPane();
        jpScene = new javax.swing.JPanel();
        jlLineaScene = new javax.swing.JLabel();
        taScene = new javax.swing.JTextArea();
        jpSouthEast = new javax.swing.JPanel();
        jlFileDirTitleEast = new javax.swing.JLabel();
        jlFileDirScene = new javax.swing.JLabel();
        jlTitleEast = new javax.swing.JLabel();
        jMenuBar = new javax.swing.JMenuBar();
        jmArchivo = new javax.swing.JMenu();
        jmiNuevo = new javax.swing.JMenuItem();
        jmiAbrir = new javax.swing.JMenuItem();
        jmiGuardar = new javax.swing.JMenuItem();
        jmiGuardarComo = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jmiSalir = new javax.swing.JMenuItem();
        jmEjecutar = new javax.swing.JMenu();
        jmiCompilarConfig = new javax.swing.JMenuItem();
        jmiCompilarScene = new javax.swing.JMenuItem();
        jmiEjecutarJuego = new javax.swing.JMenuItem();
        jmiCrearEscenario = new javax.swing.JMenuItem();
        jmiTablaSimbolos = new javax.swing.JMenuItem();
        jmiErrores = new javax.swing.JMenuItem();
        jmAyuda = new javax.swing.JMenu();
        jmiManualUsuario = new javax.swing.JMenuItem();
        jmiManualTecnico = new javax.swing.JMenuItem();
        jmiAcercaDe = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("JBadMeth - Editor");
        setBounds(new java.awt.Rectangle(70, 15, 1200, 720));
        setIconImage(new ImageIcon(getClass().getClassLoader().getResource("gui/acercade/Circle_Blue.png")).getImage() );
        setMinimumSize(new java.awt.Dimension(1200, 720));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jSplitPane.setDividerLocation(475);
        jSplitPane.setResizeWeight(1.0);

        jpWest.setMinimumSize(new java.awt.Dimension(225, 57));
        jpWest.setLayout(new java.awt.BorderLayout());

        jpSouthWest.setLayout(new java.awt.BorderLayout());

        jllFileDirTitleWest.setText("Directorio:");
        jpSouthWest.add(jllFileDirTitleWest, java.awt.BorderLayout.WEST);
        jpSouthWest.add(jlFileDirConfig, java.awt.BorderLayout.CENTER);

        jpWest.add(jpSouthWest, java.awt.BorderLayout.SOUTH);

        jpConfig.setLayout(new java.awt.BorderLayout());

        jlLineaConfig.setText("<html><body>1<br></body></html>");
        jlLineaConfig.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jpConfig.add(jlLineaConfig, java.awt.BorderLayout.WEST);

        taConfig.setColumns(20);
        taConfig.setRows(5);
        taConfig.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                taConfigCaretUpdate(evt);
            }
        });
        taConfig.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                taConfigFocusGained(evt);
            }
        });
        taConfig.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                taConfigKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                taConfigKeyTyped(evt);
            }
        });
        jpConfig.add(taConfig, java.awt.BorderLayout.CENTER);

        jspWest.setViewportView(jpConfig);

        jpWest.add(jspWest, java.awt.BorderLayout.CENTER);

        jlTitleWest.setText("Fichero de Configuración");
        jpWest.add(jlTitleWest, java.awt.BorderLayout.NORTH);

        jSplitPane.setLeftComponent(jpWest);

        jpEast.setMinimumSize(new java.awt.Dimension(225, 57));
        jpEast.setLayout(new java.awt.BorderLayout());

        jpScene.setLayout(new java.awt.BorderLayout());

        jlLineaScene.setText("<html><body>1<br></body></html>");
        jlLineaScene.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jpScene.add(jlLineaScene, java.awt.BorderLayout.WEST);

        taScene.setColumns(20);
        taScene.setRows(5);
        taScene.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                taSceneCaretUpdate(evt);
            }
        });
        taScene.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                taSceneFocusGained(evt);
            }
        });
        taScene.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                taSceneKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                taSceneKeyTyped(evt);
            }
        });
        jpScene.add(taScene, java.awt.BorderLayout.CENTER);

        jspEast.setViewportView(jpScene);

        jpEast.add(jspEast, java.awt.BorderLayout.CENTER);

        jpSouthEast.setLayout(new java.awt.BorderLayout());

        jlFileDirTitleEast.setText("Directorio:");
        jpSouthEast.add(jlFileDirTitleEast, java.awt.BorderLayout.WEST);
        jpSouthEast.add(jlFileDirScene, java.awt.BorderLayout.CENTER);

        jpEast.add(jpSouthEast, java.awt.BorderLayout.SOUTH);

        jlTitleEast.setText("Fichero de Escenario");
        jpEast.add(jlTitleEast, java.awt.BorderLayout.PAGE_START);

        jSplitPane.setRightComponent(jpEast);

        getContentPane().add(jSplitPane, java.awt.BorderLayout.CENTER);

        jMenuBar.setToolTipText("");

        jmArchivo.setMnemonic(KeyEvent.VK_A);
        jmArchivo.setText("Archivo");

        jmiNuevo.setText("Nuevo");
        jmiNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiNuevoActionPerformed(evt);
            }
        });
        jmArchivo.add(jmiNuevo);

        jmiAbrir.setText("Abrir");
        jmiAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAbrirActionPerformed(evt);
            }
        });
        jmArchivo.add(jmiAbrir);

        jmiGuardar.setText("Guardar");
        jmiGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiGuardarActionPerformed(evt);
            }
        });
        jmArchivo.add(jmiGuardar);

        jmiGuardarComo.setText("Guardar Como");
        jmiGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiGuardarComoActionPerformed(evt);
            }
        });
        jmArchivo.add(jmiGuardarComo);
        jmArchivo.add(jSeparator1);

        jmiSalir.setText("Salir");
        jmiSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSalirActionPerformed(evt);
            }
        });
        jmArchivo.add(jmiSalir);

        jMenuBar.add(jmArchivo);

        jmEjecutar.setText("Ejecutar");

        jmiCompilarConfig.setText("Compilar archivo de Configuración");
        jmiCompilarConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCompilarConfigActionPerformed(evt);
            }
        });
        jmEjecutar.add(jmiCompilarConfig);

        jmiCompilarScene.setText("Compilar archivo de Escenario");
        jmiCompilarScene.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCompilarSceneActionPerformed(evt);
            }
        });
        jmEjecutar.add(jmiCompilarScene);

        jmiEjecutarJuego.setText("Ejecutar/Probar Juego");
        jmiEjecutarJuego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiEjecutarJuegoActionPerformed(evt);
            }
        });
        jmEjecutar.add(jmiEjecutarJuego);

        jmiCrearEscenario.setText("Crear Escenario");
        jmiCrearEscenario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCrearEscenarioActionPerformed(evt);
            }
        });
        jmEjecutar.add(jmiCrearEscenario);

        jmiTablaSimbolos.setText("Tabla de Símbolos");
        jmiTablaSimbolos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiTablaSimbolosActionPerformed(evt);
            }
        });
        jmEjecutar.add(jmiTablaSimbolos);

        jmiErrores.setText("Errores");
        jmiErrores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiErroresActionPerformed(evt);
            }
        });
        jmEjecutar.add(jmiErrores);

        jMenuBar.add(jmEjecutar);

        jmAyuda.setText("Ayuda");

        jmiManualUsuario.setText("Manual de Usuario");
        jmiManualUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiManualUsuarioActionPerformed(evt);
            }
        });
        jmAyuda.add(jmiManualUsuario);

        jmiManualTecnico.setText("Manual Técnico");
        jmiManualTecnico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiManualTecnicoActionPerformed(evt);
            }
        });
        jmAyuda.add(jmiManualTecnico);

        jmiAcercaDe.setText("Acerca De...");
        jmiAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAcercaDeActionPerformed(evt);
            }
        });
        jmAyuda.add(jmiAcercaDe);

        jMenuBar.add(jmAyuda);

        setJMenuBar(jMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void taConfigCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_taConfigCaretUpdate
    caret = evt.getDot();
}//GEN-LAST:event_taConfigCaretUpdate

private void taConfigKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taConfigKeyPressed

    switch (evt.getKeyCode()) {
        case KeyEvent.VK_BACK_SPACE:

            int erased = 0;

            try {
                erased = this.taConfig.getText(caret - 1, 1).charAt(0);

            } catch (javax.swing.text.BadLocationException e) {
                System.out.println("BadLocationException se ha disparado");
            }
            if (erased == 10) {
                this.removeLabelLines(this.linesConfig, this.jlLineaConfig);
            }
            break;
        case KeyEvent.VK_DELETE:
            erased = 0;
            try {
                erased = taConfig.getText(caret, 1).charAt(0);
            } catch (javax.swing.text.BadLocationException e) {
            }
            if (erased == 10) {
                //removeLabelLinesConfig();
                this.removeLabelLines(this.linesConfig, this.jlLineaConfig);
            }
            break;
        case KeyEvent.VK_ENTER:
            this.addLabelLines(this.linesConfig, this.jlLineaConfig);
            break;
    }
}//GEN-LAST:event_taConfigKeyPressed

private void taConfigKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taConfigKeyTyped
    savedConfig = false;

    if (originalFileConfig == null) {
        titleConfig = "JBadMeth - Nuevo Archivo Configuracion*";
    } else {
        titleConfig = "JBadMeth - " + fileNameConfig + "*";
    }
    setTitle(titleConfig);

}//GEN-LAST:event_taConfigKeyTyped

private void taSceneCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_taSceneCaretUpdate
    caret = evt.getDot();
}//GEN-LAST:event_taSceneCaretUpdate

private void taSceneKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taSceneKeyPressed

    switch (evt.getKeyCode()) {
        case KeyEvent.VK_BACK_SPACE:

            int erased = 0;

            try {
                erased = this.taScene.getText(caret - 1, 1).charAt(0);

            } catch (javax.swing.text.BadLocationException e) {
                System.out.println("BadLocationException se ha disparado");
            }
            if (erased == 10) {
                this.removeLabelLines(this.linesScene, this.jlLineaScene);
            }
            break;
        case KeyEvent.VK_DELETE:
            erased = 0;
            try {
                erased = taScene.getText(caret, 1).charAt(0);
            } catch (javax.swing.text.BadLocationException e) {
            }
            if (erased == 10) {
                removeLabelLines(this.linesScene, this.jlLineaScene);
            }
            break;
        case KeyEvent.VK_ENTER:
            addLabelLines(this.linesScene, this.jlLineaScene);
            break;
    }
}//GEN-LAST:event_taSceneKeyPressed

private void taSceneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taSceneKeyTyped
    savedScene = false;

    if (originalFileScene == null) {
        titleScene = "JBadMeth - Nuevo Archivo Escena*";
        
    } else {
        titleScene = "JBadMeth - " + fileNameScene + "*";
    }
    setTitle(titleScene);
}//GEN-LAST:event_taSceneKeyTyped

private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    String state = "Cerrar";
    if (checkSaved(true, state) && checkSaved(false, state))
    Runtime.getRuntime().exit(0);
}//GEN-LAST:event_formWindowClosing

private void jmiNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiNuevoActionPerformed
    nuevo();
}//GEN-LAST:event_jmiNuevoActionPerformed

private void jmiAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAbrirActionPerformed
    abrir();
}//GEN-LAST:event_jmiAbrirActionPerformed

private void jmiGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiGuardarActionPerformed
   
    if (focusFlag){
        //guardar fichero Configuracion
        savedConfig = guardar(true, taConfig.getText(), originalFileConfig);
    } else {
        //guardar fichero Escenario
        savedScene = guardar(false, taScene.getText(), originalFileScene);
    }
    
}//GEN-LAST:event_jmiGuardarActionPerformed

private void jmiGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiGuardarComoActionPerformed
    guardarComo(focusFlag);
}//GEN-LAST:event_jmiGuardarComoActionPerformed

private void jmiSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSalirActionPerformed
    String state = "Cerrar";
    if (checkSaved(true, state) && checkSaved(false, state))
    Runtime.getRuntime().exit(0);
}//GEN-LAST:event_jmiSalirActionPerformed

private void jmiCompilarConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCompilarConfigActionPerformed

    if (!checkSaved(true, "Compilar Configuración")) {
        JOptionPane.showMessageDialog(this, "No puede compilar si no guarda el fichero Configuración", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }
    TablaSimbolos ts = new TablaSimbolos();
    LinkedList<XError> lista = new LinkedList<>();
    try {
        
        ScannerConfig scannerconfig = new ScannerConfig(new BufferedReader(new FileReader(originalFileConfig))); 
        scannerconfig.lista = lista;
        ParserConfig parserconfig = new ParserConfig(scannerconfig);
        parserconfig.setTablaSimbolos(ts);
        parserconfig.lista = lista;
        parserconfig.parse();
        //guardar la tabla de simbolos
        tablasimbolos = ts;
        listaErrores = lista;
        ParserSceneFlag = false;
    } catch (Exception e) {
        e.printStackTrace();
    }
    System.out.println("Termina el anailsis de Configuracion");
}//GEN-LAST:event_jmiCompilarConfigActionPerformed

private void jmiCompilarSceneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCompilarSceneActionPerformed
    if (!checkSaved(false, "Compilar Escenario")) {
        JOptionPane.showMessageDialog(this, "No puede compilar si no guarda el fichero Escenario", "Advertencia", JOptionPane.WARNING_MESSAGE);
        return;
    }
    if (tablasimbolos == null) {
        JOptionPane.showMessageDialog(this, "No se ha compilado primero el fichero Configuración", "Advertencia", JOptionPane.ERROR_MESSAGE);
        return;
    }
    LinkedList<XError> lista = new LinkedList<>();
    try {
        
        ScannerScene scannerscene = new ScannerScene(new BufferedReader(new FileReader(originalFileScene)));
        scannerscene.lista = lista;
        ParserScene parserscene = new ParserScene(scannerscene);
        parserscene.setTablaSimbolos(tablasimbolos);
        
        gameworld.TableroMatriz tm = tablerogame.getTableroMatriz();
        tm.botarStage();
        tablerogame.clearDisplayHeroe();
        
        parserscene.setStage(tm);
        parserscene.lista = lista;

        parserscene.parse();
        
        listaErrores.addAll(lista);
        tablerogame.displayHeroe();
        ParserSceneFlag = true;
        tablerogame.setVisible(true);

    } catch (Exception e) {
        e.printStackTrace();
    }
    System.out.println("Termina el anailsis de Escena");
}//GEN-LAST:event_jmiCompilarSceneActionPerformed

private void jmiEjecutarJuegoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiEjecutarJuegoActionPerformed
    if (!ParserSceneFlag){
        JOptionPane.showMessageDialog(this, "No se ha compilado el fichero Escenario", "Advertencia", JOptionPane.ERROR_MESSAGE);
        return;
    }
        tablerogame.setVisible(true);
}//GEN-LAST:event_jmiEjecutarJuegoActionPerformed

private void jmiErroresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiErroresActionPerformed
    new ErroresDialog_GUI(this,true,listaErrores).setVisible(focusFlag);
}//GEN-LAST:event_jmiErroresActionPerformed

private void jmiTablaSimbolosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiTablaSimbolosActionPerformed
    new TablaSimbolosDialog_GUI(this, true, tablasimbolos).setVisible(true);
}//GEN-LAST:event_jmiTablaSimbolosActionPerformed

private void jmiManualUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiManualUsuarioActionPerformed
    String location = "docs/ManualUsuario.pdf";
    fileops.FileRW.openGeneral(location);
}//GEN-LAST:event_jmiManualUsuarioActionPerformed

private void jmiManualTecnicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiManualTecnicoActionPerformed
    String location = "docs/ManualTecnico.pdf";
    fileops.FileRW.openGeneral(location);
}//GEN-LAST:event_jmiManualTecnicoActionPerformed

private void jmiAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAcercaDeActionPerformed
    if (acerca==null){
        acerca = new gui.acercade.AcercaDe();
    }
    acerca.setVisible(true);
}//GEN-LAST:event_jmiAcercaDeActionPerformed

private void taConfigFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_taConfigFocusGained
    focusFlag = true; //taConfig tiene el focus
    setTitle(titleConfig);
}//GEN-LAST:event_taConfigFocusGained

private void taSceneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_taSceneFocusGained
    focusFlag = false; //taScene tiene el focus
    setTitle(titleScene);
}//GEN-LAST:event_taSceneFocusGained

private void jmiCrearEscenarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCrearEscenarioActionPerformed
    if (tablasimbolos == null) {
        JOptionPane.showMessageDialog(this, "No se ha compilado primero el fichero Configuración", "Advertencia", JOptionPane.ERROR_MESSAGE);
        return;
    }
    tableroedit.setTabla(tablasimbolos);
    tableroedit.clearLists();
    tableroedit.sortLists();
    tableroedit.setVisible(true);
}//GEN-LAST:event_jmiCrearEscenarioActionPerformed
    

    /**
     * Remueve una linea de cualquier TextArea
     * @param lines Contador de lineas del jta
     * @param jlLinea El label con las lineas
     **/
    private void removeLabelLines(Integer lines, JLabel jlLinea) {
        System.out.println("Removing the label lines");
        if (lines <= 2) {
            jlLinea.setText("<HTML><BODY>1<BR/></BODY></HTML>");
            return;
        }
        String linea = jlLinea.getText();
        int max = linea.length();
        linea = linea.substring(0, (max - htmlEnd.length()) - 6);
        linea = linea.concat(htmlEnd);
        jlLinea.setText(linea);
        lines--;
        if (focusFlag) {
            linesConfig = lines;
        } else {
            linesScene = lines;
        }
    }

    /**
     * Suma una linea de cualquier TextArea.
     * Es llamado por los listeners del teclado
     * @param lines Contador de lineas del TextArea
     * @param jlLinea El label con las lineas
     **/
    private void addLabelLines(Integer lines, JLabel jlLinea) {
        String lns = jlLinea.getText();
        lns = lns.substring(0, lns.length() - htmlEnd.length());
        lines++;
        jlLinea.setText(lns + lines + "<BR/>" + htmlEnd);
        if (focusFlag) {
            linesConfig = lines;
        } else {
            linesScene = lines;
        }
    }

    /**
     * Analiza cuantos '\n' trae cualquier TextArea y las ponen en el label de las lineas.
     * Es llamado al momento de cargar un archivo.
     * @param jta El JTextArea a contar lineas
     * @param selectFlag true para Configuracion, false para Escenario
     * @param jlLinea El label con las lineas
     **/
    private void setLabelLines(JTextArea jta, boolean selectFlag, JLabel jlLinea) {
        int lines = jta.getLineCount();
        StringBuilder label = new StringBuilder("<html><body style=\"text-align:right;\">");
        for (int i = 1; i <= lines; i++) {
            label.append(i);
            label.append("<br/>");
        }
        label.append(htmlEnd);
        jlLinea.setText(label.toString());
        
        if (selectFlag) {
            linesConfig = lines;
        } else {
            linesScene = lines;
        }
    }
    /**
     * Limpia uno de los TextArea.
     **/
    private void nuevo(){
        Object result = JOptionPane.showInputDialog(this,
                "Seleccione el tipo de fichero a crear",
                "Crear Fichero",
                JOptionPane.INFORMATION_MESSAGE,
                null,
                opciones,
                opciones[0]);
        if (result == null) {return;}
        boolean resultFlag = result == opciones[0]?true:false;
        
        if (!checkSaved(resultFlag, "Crear Fichero")) {return;}
        JTextArea textArea;
        JLabel jlPath, jlLines;
        if (resultFlag){
            //limpiar Config
            taConfig.setText("");
            originalFileConfig = null;
            titleConfig = "JBadMeth - Nuevo Fichero Configuracion";
            savedConfig = true;
            textArea = taConfig;
            jlPath = jlFileDirConfig;
            jlLines = jlLineaConfig;
            
        } else {
            //limpiar Scene
            taScene.setText("");
            originalFileScene = null;
            titleScene = "JBadMeth - Nuevo Fichero Escenario";
            savedScene = true;
            textArea = taScene;
            jlPath = jlFileDirScene;
            jlLines = jlLineaScene;
        }
        jlPath.setText("");
        setLabelLines(textArea, resultFlag, jlLines);
        
    }
    /**
     * Consigue desplegar el texto de un fichero indicado a uno de los 2 TextArea
     **/
    private void abrir() {
        Object result = JOptionPane.showInputDialog(this,
                "Seleccione el tipo de fichero a abrir",
                "Abrir Fichero",
                JOptionPane.INFORMATION_MESSAGE,
                null,
                opciones,
                opciones[0]);
        if (result == null) {return;}
        boolean resultFlag = result == opciones[0]?true:false;
        
        if (!checkSaved(resultFlag, "Abrir Fichero")) {return;}
        
        jfc.setDialogTitle("Abrir fichero para " + result);
        
        if (jfc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) {return;}
        
        File fSelected = jfc.getSelectedFile();
        String fAbsolutePath = fSelected.getAbsolutePath();

        String fileName = fSelected.getName();
        String title = "JBadMeth - " + fileName;
        JTextArea jta;
        JLabel lblLine, lblPath;
        if (resultFlag) {
            //abrir fichero de Configuracion
            originalFileConfig = fSelected;
            titleConfig = title;
            fileNameConfig = fileName;
            jta = taConfig;
            lblLine = jlLineaConfig;
            lblPath = jlFileDirConfig;
            savedConfig = true;
        } else {
            //abrir fichero de Escenario
            originalFileScene = fSelected;
            titleScene = title;
            fileNameScene = fileName;
            jta = taScene;
            lblLine = jlLineaScene;
            lblPath = jlFileDirScene;
            savedScene = true;
        }
        fileops.FileRW.read(fAbsolutePath, jta);
        setTitle(title);
        setLabelLines(jta, resultFlag, lblLine);
        lblPath.setText(fAbsolutePath);
    }
    /**
     * Guarda a un fichero el texto contenido en un TextArea. Si el texto no pertenece a algun fichero, se invoca a guardarComo()
     * 
     * Solo puede guardar un TextArea a la vez, dado la naturaliza de los parametros
     * El metodo que lo llama, debera actualizar las variables bandera del estado guardado ("savedConfig" y "savedScene")
     * @param saveFlag True para guardar para Config, sino es Scene. Es para ser independiente de focusFlag.
     * @param text Contiene el texto a guardar
     * @param saveFile Contiene directorio a guardar el texto
     * @return true si se ha guardado.
     **/
    public boolean guardar(boolean saveFlag, String text, File saveFile){
        
        if (saveFile == null) {
            return guardarComo(saveFlag);
        }
        if (!fileops.FileRW.write(text, saveFile)){return false;}
        
        String fileName = saveFile.getName();
        String title = "JBadMeth - " + fileName;
        if (saveFlag){
            titleConfig = title;
            fileNameConfig = fileName;
            savedConfig = true;
        } else {
            titleScene = title;
            fileNameScene = fileName;
            savedScene = true;
        }
    
        setTitle(titleScene);
        return true;
    }
    /**
     * Guarda el contenido del TextArea con foco actual a un fichero indicado por el usuario.
     * Las banderas de estado de guardado se realizan su respectivo actualizacion
     * @param saveFlag True para guardar para Config, sino es Scene. Es para ser independiente de focusFlag.
     * @return true si se ha guardado a un fichero. falso si se cancela el JFileChooser, o tuvo dificultad con la escritura al disco
     **/
    public boolean guardarComo(boolean saveFlag){
        jfc.setDialogTitle("Guardar " + opciones[saveFlag?0:1] + " Como");
        int aws = jfc.showSaveDialog(this);
        if (aws != JFileChooser.APPROVE_OPTION) {return false;}
        File saveFile = jfc.getSelectedFile();
        
        if (!guardar(saveFlag, (saveFlag?taConfig:taScene).getText(), saveFile)) {return false;}
        
        //String fileName = saveFile.getName();
        //String title = "JBadMeth - " + fileName;
        String fAbsolutePath = saveFile.getAbsolutePath();
        JLabel lblPath;
        if (saveFlag) {
            originalFileConfig = saveFile;
            //titleConfig = title;
            //fileNameConfig = fileName;
            lblPath = jlFileDirConfig;
            //savedConfig = true;
        } else {
            originalFileScene = saveFile;
            //titleScene = title;
            //fileNameScene = fileName;
            lblPath = jlFileDirScene;
            //savedScene = true;
        }
        //setTitle(title);
        lblPath.setText(fAbsolutePath);
        return true;
    }
    /**
     * Analiza si el texto ha sido guardado. Si no esta guardado, solicita al usuario que ingrese el procedimiento a seguir
     * @param saveFlag true para analizar TextArea de Configuracion, false para Escenario
     * @param operation tipo de operacion que llama al metodo. Puede ser "Cerrar", "Nuevo Fichero", "Abrir Fichero"
     * @return true si se ha guardado correctamente o se ha negado guardar cambios. false si se ha cancelado, cerrado el dialogo, o hubo error de guardado
     **/
    private boolean checkSaved(boolean saveFlag, String operation){
        
        String text;
        File originalFile;
        if (saveFlag){
            if (savedConfig) return true;
            text = taConfig.getText();
            originalFile = originalFileConfig;
        } else {
            if (savedScene) return true;
            text = taScene.getText();
            originalFile = originalFileScene;
        }
        int select = JOptionPane.showConfirmDialog(this, 
                "Desea Guardar fichero "+opciones[saveFlag?0:1]+"?", 
                operation, 
                JOptionPane.YES_NO_CANCEL_OPTION, 
                JOptionPane.QUESTION_MESSAGE);
        if (select == JOptionPane.NO_OPTION) {return true;}
        if (select == JOptionPane.YES_OPTION){
            boolean saveAns = guardar(saveFlag, text, originalFile);
            if (!saveAns){
                JOptionPane.showMessageDialog(this, "No se realizó: " + operation, "Advertencia!", JOptionPane.WARNING_MESSAGE);
            }
            return saveAns;
            
        }
        return false;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSplitPane jSplitPane;
    private javax.swing.JLabel jlFileDirConfig;
    private javax.swing.JLabel jlFileDirScene;
    private javax.swing.JLabel jlFileDirTitleEast;
    private javax.swing.JLabel jlLineaConfig;
    private javax.swing.JLabel jlLineaScene;
    private javax.swing.JLabel jlTitleEast;
    private javax.swing.JLabel jlTitleWest;
    private javax.swing.JLabel jllFileDirTitleWest;
    private javax.swing.JMenu jmArchivo;
    private javax.swing.JMenu jmAyuda;
    private javax.swing.JMenu jmEjecutar;
    private javax.swing.JMenuItem jmiAbrir;
    private javax.swing.JMenuItem jmiAcercaDe;
    private javax.swing.JMenuItem jmiCompilarConfig;
    private javax.swing.JMenuItem jmiCompilarScene;
    private javax.swing.JMenuItem jmiCrearEscenario;
    private javax.swing.JMenuItem jmiEjecutarJuego;
    private javax.swing.JMenuItem jmiErrores;
    private javax.swing.JMenuItem jmiGuardar;
    private javax.swing.JMenuItem jmiGuardarComo;
    private javax.swing.JMenuItem jmiManualTecnico;
    private javax.swing.JMenuItem jmiManualUsuario;
    private javax.swing.JMenuItem jmiNuevo;
    private javax.swing.JMenuItem jmiSalir;
    private javax.swing.JMenuItem jmiTablaSimbolos;
    private javax.swing.JPanel jpConfig;
    private javax.swing.JPanel jpEast;
    private javax.swing.JPanel jpScene;
    private javax.swing.JPanel jpSouthEast;
    private javax.swing.JPanel jpSouthWest;
    private javax.swing.JPanel jpWest;
    private javax.swing.JScrollPane jspEast;
    private javax.swing.JScrollPane jspWest;
    private javax.swing.JTextArea taConfig;
    private javax.swing.JTextArea taScene;
    // End of variables declaration//GEN-END:variables
    private JFileChooser jfc;
}
